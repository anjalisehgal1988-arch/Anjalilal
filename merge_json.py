import json
import os
import shutil

# Resolve project root and dataset paths
ROOT_DIR = os.path.dirname(os.path.abspath(__file__))
GAZEFOLLOW_DIR = os.path.join(ROOT_DIR, 'Gazefollow')
VAT_DIR = os.path.join(ROOT_DIR, 'VAT')

# Define JSON file paths (generated by prepare_data.py and prepare_vatdata.py)
gazefollow_path = os.path.join(ROOT_DIR, 'gazefollow_selected.json')
vat_path = os.path.join(ROOT_DIR, 'vat_selected.json')
output_path = os.path.join(ROOT_DIR, 'combined_gazefollow_vat.json')

# Load Gazefollow JSON
with open(gazefollow_path, 'r') as f:
    gazefollow_data = json.load(f)

# Load VAT JSON
with open(vat_path, 'r') as f:
    vat_data = json.load(f)

# Combine the data
combined_data = gazefollow_data + vat_data

# Save combined JSON
with open(output_path, 'w') as f:
    json.dump(combined_data, f, indent=4)

print(f"Merged {len(gazefollow_data)} Gazefollow entries and {len(vat_data)} VAT entries into {output_path}")

# Copy images into a unified folder structure
merged_images_root = os.path.join(ROOT_DIR, 'merged_images')
gf_out_dir = os.path.join(merged_images_root, 'gazefollow')
vat_out_dir = os.path.join(merged_images_root, 'vat')
os.makedirs(gf_out_dir, exist_ok=True)
os.makedirs(vat_out_dir, exist_ok=True)

# Helper to safely copy a file, creating subdirectories as needed
def safe_copy(src_path, dest_root, rel_path):
    try:
        dest_path = os.path.join(dest_root, rel_path)
        dest_dir = os.path.dirname(dest_path)
        os.makedirs(dest_dir, exist_ok=True)
        shutil.copy2(src_path, dest_path)
        return True
    except Exception as e:
        print(f"Failed to copy {src_path} -> {dest_path}: {e}")
        return False

# 1) Copy Gazefollow images preserving train/test2 substructure
gf_copied = 0
for item in gazefollow_data:
    rel_path = item.get('path', '')
    if not rel_path:
        continue
    # Normalize separators and build absolute source path
    src_path = os.path.join(GAZEFOLLOW_DIR, rel_path.replace('/', os.sep))
    if os.path.isfile(src_path):
        if safe_copy(src_path, gf_out_dir, rel_path):
            gf_copied += 1
    else:
        print(f"Missing Gazefollow image: {src_path}")

print(f"Copied {gf_copied} Gazefollow images into {gf_out_dir}")

# 2) Build a name index for VAT images to resolve paths by filename
vat_name_index = {}
vat_images_root = os.path.join(VAT_DIR, 'images')
for root, dirs, files in os.walk(vat_images_root):
    for fname in files:
        if fname.lower().endswith('.jpg'):
            vat_name_index.setdefault(fname, []).append(os.path.join(root, fname))

# Copy VAT images using filename matching, flattening into clip/show substructure if derivable
vat_copied = 0
for item in vat_data:
    fname = item.get('path', '')
    if not fname:
        continue
    candidates = vat_name_index.get(fname)
    if candidates:
        # Choose the first match; if multiple exist this may be ambiguous
        src_path = candidates[0]
        # Derive relative path under vat_out_dir as <show>/<clip>/<fname> if possible
        # src_path structure: VAT/images/<show>/<clip>/<fname>
        rel_parts = os.path.relpath(src_path, vat_images_root).split(os.sep)
        rel_path = os.path.join(*rel_parts)
        if safe_copy(src_path, vat_out_dir, rel_path):
            vat_copied += 1
    else:
        print(f"Missing VAT image by name index: {fname}")

print(f"Copied {vat_copied} VAT images into {vat_out_dir}")